---
AWSTemplateFormatVersion: 2010-09-09
Description: "AWS CloudFormation Template: Highly available, scalable web stack with an Amazon RDS database instance for the backend data store, ELB for multi-instance load balancing, S3 for static storage, Code Deploy Application / Deploy Group"
Parameters: 
  KeyPair: 
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  Stack: 
    Default: projectname
    Description: Stack name
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  Domain: 
    Default: domainname
    Description: Domain name
    Type: String
    MinLength: 1
    MaxLength: 64
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  Owner: 
    Default: acme
    Description: Project owner name
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  Mode: 
    Default: prod
    Description: Mode name (dev, stage, test, prod)
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  CreateRDSInstancesStage: 
    Default: false
    Description: Create Stage RDS instances?
    Type: String
    AllowedValues: 
      - true
      - false
  CreateRDSInstancesProd:
    Default: false
    Description: Create Prod RDS instances?
    Type: String
    AllowedValues: 
      - true
      - false
  CreateEFSStage: 
    Default: true
    Description: Create EFS Resources (stage)?
    Type: String
    AllowedValues: 
      - true
      - false
  CreateEFSProd: 
    Default: true
    Description: Create EFS Resources (prod)?
    Type: String
    AllowedValues: 
      - true
      - false
  VPCIDCIDRRange: 
    Description: The IP address range for your new VPC.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.50.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EC2WebSubnetCIDRRangeA: 
    Description: The IP address range for Web subnet in AZ A.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.50.2.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EC2WebSubnetCIDRRangeB: 
    Description: The IP address range for Web subnet in AZ B.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.50.3.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EC2WebSubnetAZA: 
    Default: eu-west-1a
    Description: EC2 Web Subnet AZ - A
    Type: String
    MinLength: 1
    MaxLength: 10
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  EC2WebSubnetAZB: 
    Default: eu-west-1b
    Description: EC2 Web Subnet AZ - B
    Type: String
    MinLength: 1
    MaxLength: 10
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

##############
# RDS Config #
##############

  RDSSubnetCIDRRangeA: 
    Description: The IP address range for RDS subnet in AZ A.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.50.4.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  RDSSubnetCIDRRangeB: 
    Description: The IP address range for RDS subnet in AZ B.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.50.5.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  RDSSubnetAZA: 
    Default: eu-west-1a
    Description: RDS Subnet AZ - A
    Type: String
    MinLength: 1
    MaxLength: 10
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  RDSSubnetAZB: 
    Default: eu-west-1b
    Description: RDS Subnet AZ - A
    Type: String
    MinLength: 1
    MaxLength: 10
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBName: 
    Default: myDatabase
    Description: MySQL database name
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser: 
    NoEcho: true
    Description: Username for MySQL database access
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword: 
    NoEcho: true
    Description: Password for MySQL database access
    Type: String
    MinLength: 8
    MaxLength: 41
    ConstraintDescription: must contain only alphanumeric characters.
  DBInstanceClassStage: 
    Description: The database instance type
    Type: String
    Default: db.t2.micro
    AllowedValues: 
      - db.t1.micro
      - db.m1.small
      - db.m1.medium
      - db.m1.large
      - db.m1.xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.m4.4xlarge
      - db.m4.10xlarge
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.cr1.8xlarge
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large
    ConstraintDescription: must select a valid database instance type.
  MultiAZDatabaseStage: 
    Default: true
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String
    AllowedValues: 
      - true
      - false
    ConstraintDescription: must be either true or false.
  DBAllocatedStorageStage:
    Default: 5
    Description: The size of the database (Gb)
    Type: Number
    MinValue: 5
    MaxValue: 1024
    ConstraintDescription: must be between 5 and 1024Gb.
  AllowRemoteStage:
    Default: false
    Description: Allow accesss from management IP
    Type: String
    AllowedValues: 
      - true
      - false
  DBInstanceClassProd: 
    Description: The database instance type
    Type: String
    Default: db.t2.micro
    AllowedValues: 
      - db.t1.micro
      - db.m1.small
      - db.m1.medium
      - db.m1.large
      - db.m1.xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.m4.4xlarge
      - db.m4.10xlarge
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.cr1.8xlarge
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large
    ConstraintDescription: must select a valid database instance type.
  MultiAZDatabaseProd: 
    Default: true
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String
    AllowedValues: 
      - true
      - false
    ConstraintDescription: must be either true or false.
  DBAllocatedStorageProd:
    Default: 5
    Description: The size of the database (Gb)
    Type: Number
    MinValue: 5
    MaxValue: 1024
    ConstraintDescription: must be between 5 and 1024Gb.
  AllowRemoteProd:
    Default: false
    Description: Allow accesss from management IP
    Type: String
    AllowedValues: 
      - true
      - false
  SSHMgmtIP: 
    Description:  The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.0.6.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  VPCPeeringConnectionID: 
    Description:  The VPC Peering Connection ID if available
    Type: String
    MinLength: 0
    MaxLength: 20
    Default: ""
    ConstraintDescription: must be a valid VPC Peering Connection ID (pcx-c0c41da9)
  PeerOwnerID:
    Description: Management account ID
    Type: String
    MinLength: 0
    MaxLength: 20
    Default: ""
    ConstraintDescription: must be a valid AWS account ID
  DevOwnerID:
    Description: Dev account ID
    Type: String
    MinLength: 0
    MaxLength: 20
    Default: ""
    ConstraintDescription: must be a valid AWS account ID
Conditions: 
  CreateDevS3Access:
    !Not [ !Equals [ !Ref DevOwnerID, "" ] ]
  SkipDevS3Access:
    !Equals [ !Ref DevOwnerID, "" ]
  CreateEFSResourcesStage:
    !Equals [ !Ref CreateEFSStage, true ]
  CreateEFSResourcesProd:
    !Equals [ !Ref CreateEFSProd, true ]
Resources: 
  StackVPC: 
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCIDCIDRRange
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: !Join [ -, [ !Ref Stack, vpc ] ]
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Mode
          Value: !Ref Mode
  EC2WebSubnetA: 
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref StackVPC
      AvailabilityZone: !Ref EC2WebSubnetAZA
      CidrBlock: !Ref EC2WebSubnetCIDRRangeA
      Tags: 
        - Key: Name
          Value: !Join [ -, [ !Ref Stack, web-a, !Ref Mode ] ]
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Mode
          Value: !Ref Mode
  EC2WebSubnetB: 
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref StackVPC
      AvailabilityZone: !Ref EC2WebSubnetAZB
      CidrBlock: !Ref EC2WebSubnetCIDRRangeB
      Tags: 
        - Key: Name
          Value: !Join [ -, [ !Ref Stack, web-b, !Ref Mode ] ]
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Mode
          Value: !Ref Mode
  RDSSubnetA: 
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref StackVPC
      AvailabilityZone: !Ref RDSSubnetAZA
      CidrBlock: !Ref RDSSubnetCIDRRangeA
      Tags: 
        - Key: Name
          Value: !Join [ -, [ !Ref Stack, db-a, !Ref Mode ] ]
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Mode
          Value: !Ref Mode
  RDSSubnetB: 
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref StackVPC
      AvailabilityZone: !Ref RDSSubnetAZB
      CidrBlock: !Ref RDSSubnetCIDRRangeB
      Tags: 
        - Key: Name
          Value: !Join [ -, [ !Ref Stack, db-b, !Ref Mode ] ]
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Mode
          Value: !Ref Mode
  RouteTable: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref StackVPC
  SubnetRouteTableAssociationA: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref EC2WebSubnetA
      RouteTableId: !Ref RouteTable
  SubnetRouteTableAssociationB: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref EC2WebSubnetB
      RouteTableId: !Ref RouteTable
  RDSSubnetRouteTableAssociationA: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref RDSSubnetA
      RouteTableId: !Ref RouteTable
  RDSSubnetRouteTableAssociationB: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref RDSSubnetB
      RouteTableId: !Ref RouteTable
  InternetGateway: 
    Type: AWS::EC2::InternetGateway
  AttachGateway: 
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId: !Ref StackVPC
      InternetGatewayId: !Ref InternetGateway
  PublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties: 
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref StackVPC
      GroupDescription: Security group for EFS mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0
  FileSystemStage:
    Type: AWS::EFS::FileSystem
    Condition: CreateEFSResourcesStage
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value:
          !Join [ -, [ !Ref Stack, efs-stage ] ]
      - Key: Mode
        Value: stage
  MountTargetStage:
    Type: AWS::EFS::MountTarget
    Condition: CreateEFSResourcesStage
    Properties:
      FileSystemId:
        Ref: FileSystemStage
      SubnetId:
        Ref: EC2WebSubnetA
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  FileSystemProd:
    Type: AWS::EFS::FileSystem
    Condition: CreateEFSResourcesProd
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value:
          !Join [ -, [ !Ref Stack, efs-prod ] ]
      - Key: Mode
        Value: prod
  MountTargetProd:
    Type: AWS::EFS::MountTarget
    Condition: CreateEFSResourcesProd
    Properties:
      FileSystemId:
        Ref: FileSystemProd
      SubnetId:
        Ref: EC2WebSubnetA
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  EC2WebSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: EC2 Security Group
      VpcId: !Ref StackVPC
      Tags: 
        - Key: Name
          Value: !Join [ -, [ !Ref Stack, web-sg, !Ref Mode ] ]
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Mode
          Value: !Ref Mode
  ELBSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: ELB Security Group
      SecurityGroupIngress: 
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
      VpcId: !Ref StackVPC
      Tags: 
        - Key: Name
          Value: !Join [ -, [ !Ref Stack, elb, !Ref Mode ] ]
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Mode
          Value: !Ref Mode
  WebInboundRuleHTTP: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt ELBSecurityGroup.GroupId
      GroupId: !GetAtt EC2WebSecurityGroup.GroupId
  WebInboundRuleVPCSSH: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SSHMgmtIP
      GroupId: !GetAtt EC2WebSecurityGroup.GroupId
  WebInboundRuleHTTPS: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !GetAtt ELBSecurityGroup.GroupId
      GroupId: !GetAtt EC2WebSecurityGroup.GroupId
  ELBOutboundRuleHTTP: 
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId: !GetAtt EC2WebSecurityGroup.GroupId
      GroupId: !GetAtt ELBSecurityGroup.GroupId
  ELBOutboundRuleHTTPS: 
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !GetAtt EC2WebSecurityGroup.GroupId
      GroupId: !GetAtt ELBSecurityGroup.GroupId
  DBEC2SecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref StackVPC
      GroupDescription: Open database for access
      Tags: 
        - Key: Name
          Value: !Join [ -, [ !Ref Stack, db-sg, !Ref Mode ] ]
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Mode
          Value: !Ref Mode
  DBInboundRuleMySQL: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt EC2WebSecurityGroup.GroupId
      GroupId: !GetAtt DBEC2SecurityGroup.GroupId
  DBInboundRuleVPCMySQL: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      CidrIp: !Ref SSHMgmtIP
      GroupId: !GetAtt DBEC2SecurityGroup.GroupId
  S3BucketDeploy: 
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties: 
      AccessControl: Private
      BucketName: !Join [ -, [ !Ref Stack, deploy ] ]
  S3BucketStage: 
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties: 
      AccessControl: Private
      BucketName: !Join [ -, [ !Ref Stack, stage ] ]
      WebsiteConfiguration: 
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration: 
        CorsRules: 
          - AllowedHeaders:
              - "*"
            AllowedMethods: 
              - GET
            AllowedOrigins:
              - "*"
            Id: CORSRule-Public
            MaxAge: 3600
  S3BucketProd: 
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties: 
      AccessControl: PublicRead
      BucketName: !Join [ -, [ !Ref Stack, prod] ]
      WebsiteConfiguration: 
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration: 
        CorsRules: 
          - AllowedHeaders:
              - "*"
            AllowedMethods: 
              - GET
            AllowedOrigins:
              - "*"
            Id: CORSRule-Public
            MaxAge: 3600
  S3BucketApex: 
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties: 
      AccessControl: PublicRead
      BucketName: !Join [ -, [ !Ref Stack, apex] ]
      WebsiteConfiguration: 
        IndexDocument: index.html
        ErrorDocument: error.html
        RoutingRules: 
          - RedirectRule: 
              HostName: !Ref Domain
  BackupAccessBucketPolicyStage:
    Type: AWS::S3::BucketPolicy
    Condition: SkipDevS3Access
    Properties: 
      Bucket: !Ref S3BucketStage
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Sid: List Access
            Effect: Allow
            Principal: 
              AWS: !Join [ '', [ 'arn:aws:iam::', !Ref PeerOwnerID, ':root' ] ]
            Action: 
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Stack, '-stage' ] ]
          - Sid: Get Object Read Only
            Effect: Allow
            Principal: 
              AWS: !Join [ '', [ 'arn:aws:iam::', !Ref PeerOwnerID, ':root' ] ]
            Action: 
              - s3:GetObject
              - s3:PutObject
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Stack, '-stage/*' ] ]
  BackupAccessBucketPolicyProd: 
    Type: AWS::S3::BucketPolicy
    Condition: SkipDevS3Access
    Properties: 
      Bucket: !Ref S3BucketProd
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Sid: List Access
            Effect: Allow
            Principal: 
              AWS: !Join [ '', [ 'arn:aws:iam::', !Ref PeerOwnerID, ':root' ] ]
            Action: 
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Stack, '-prod' ] ]
          - Sid: Get Object Read Only
            Effect: Allow
            Principal: 
              AWS: !Join [ '', [ 'arn:aws:iam::', !Ref PeerOwnerID, ':root' ] ]
            Action: 
              - s3:GetObject
              - s3:PutObject
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Stack, '-prod/*' ] ]
  BackupDevAccessBucketPolicyStage:
    Type: AWS::S3::BucketPolicy
    Condition: CreateDevS3Access
    Properties: 
      Bucket: !Ref S3BucketStage
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Sid: List Access
            Effect: Allow
            Principal: 
              AWS: !Join [ '', [ 'arn:aws:iam::', !Ref PeerOwnerID, ':root' ] ]
            Action: 
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Stack, '-stage' ] ]
          - Sid: Get Object Read Only
            Effect: Allow
            Principal: 
              AWS: !Join [ '', [ 'arn:aws:iam::', !Ref PeerOwnerID, ':root' ] ]
            Action: 
              - s3:GetObject
              - s3:PutObject
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Stack, '-stage/*' ] ]
          - Sid: List Access Dev
            Effect: Allow
            Principal: 
              AWS: !Join [ '', [ 'arn:aws:iam::', !Ref DevOwnerID, ':root' ] ]
            Action: 
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Stack, '-stage' ] ]
          - Sid: Get Object Read Only Dev
            Effect: Allow
            Principal: 
              AWS: !Join [ '', [ 'arn:aws:iam::', !Ref DevOwnerID, ':root' ] ]
            Action: 
              - s3:GetObject
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Stack, '-stage/*' ] ]
  BackupDevAccessBucketPolicyProd: 
    Type: AWS::S3::BucketPolicy
    Condition: CreateDevS3Access
    Properties: 
      Bucket: !Ref S3BucketProd
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Sid: List Access
            Effect: Allow
            Principal: 
              AWS: !Join [ '', [ 'arn:aws:iam::', !Ref PeerOwnerID, ':root' ] ]
            Action: 
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Stack, '-prod' ] ]
          - Sid: Get Object Read Only
            Effect: Allow
            Principal: 
              AWS: !Join [ '', [ 'arn:aws:iam::', !Ref PeerOwnerID, ':root' ] ]
            Action: 
              - s3:GetObject
              - s3:PutObject
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Stack, '-prod/*' ] ]
          - Sid: List Access Dev
            Effect: Allow
            Principal: 
              AWS: !Join [ '', [ 'arn:aws:iam::', !Ref DevOwnerID, ':root' ] ]
            Action: 
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Stack, '-prod' ] ]
          - Sid: Get Object Read Only Dev
            Effect: Allow
            Principal: 
              AWS: !Join [ '', [ 'arn:aws:iam::', !Ref DevOwnerID, ':root' ] ]
            Action: 
              - s3:GetObject
            Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref Stack, '-prod/*' ] ]
  S3AccessGroup: 
    Type: AWS::IAM::Group
    Properties: 
      Path: /
  S3AccessUser: 
    Type: AWS::IAM::User
    Properties: 
      Path: /
  AddS3AccessUserToS3AccessGroup: 
    Type: AWS::IAM::UserToGroupAddition
    Properties: 
      GroupName: !Ref S3AccessGroup
      Users: 
        - !Ref S3AccessUser
  S3UserAccessKey: 
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: !Ref S3AccessUser
  WebInstanceRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
          - Sid: ""
            Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: sts:AssumeRole
          - Sid: ""
            Effect: Allow
            Principal: 
              Service: 
                - codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Path: /
  WebInstanceManagedPolicy: 
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      Description: Web Instance Role Policy
      Path: /
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Action: "*"
            Resource: !Join [ '', [ "arn:aws:s3:::", !Ref S3BucketDeploy, /* ] ]
          - Effect: Allow
            Action: "*"
            Resource: !Join [ '', [ "arn:aws:s3:::", !Ref S3BucketProd, /* ] ]
          - Effect: Allow
            Action: "*"
            Resource: !Join [ '', [ "arn:aws:s3:::", !Ref S3BucketStage, /* ] ]
          - Effect: Allow
            Action: elasticloadbalancing:DescribeLoadBalancers
            Resource: "*"
      Roles: 
        - !Ref WebInstanceRole
  S3AccessPolicy: 
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: S3BucketFullAccess
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Action: "s3:ListAllMyBuckets"
            Resource: arn:aws:s3:::*
          - Effect: Allow
            Action: 
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Join [ '', [ "arn:aws:s3:::", !Ref S3BucketDeploy ] ]
          - Effect: Allow
            Action: "*"
            Resource: !Join [ '', [ "arn:aws:s3:::", !Ref S3BucketDeploy, /* ] ]
          - Effect: Allow
            Action: 
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Join [ '', [ "arn:aws:s3:::", !Ref S3BucketStage ] ]
          - Effect: Allow
            Action: "*"
            Resource: !Join [ '', [ "arn:aws:s3:::", !Ref S3BucketStage, /* ] ]
          - Effect: Allow
            Action: 
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Join [ '', [ "arn:aws:s3:::", !Ref S3BucketProd ] ]
          - Effect: Allow
            Action: "*"
            Resource: !Join [ '', [ "arn:aws:s3:::", !Ref S3BucketProd, /* ] ]
      Groups: 
        - !Ref S3AccessGroup
  DBSubnetGroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds: 
        - !Ref RDSSubnetA
        - !Ref RDSSubnetB
      Tags: 
        - Key: Name
          Value: !Join [ -, [ !Ref Stack, dbsg, !Ref Mode ] ]
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Mode
          Value: !Ref Mode
  RDSMySQLInstanceStage: 
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Retain
    DependsOn: DBEC2SecurityGroup
    Condition: CreateRDSInstanceResourcesStage
    Properties: 
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: MySQL
      DBName: !Ref DBName
      MultiAZ: !Ref MultiAZDatabaseStage
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBInstanceClassStage
      AllocatedStorage: !Ref DBAllocatedStorageStage
      PubliclyAccessible: !Ref AllowRemoteStage
      VPCSecurityGroups: 
        - !Ref DBEC2SecurityGroup
      Tags: 
        - Key: Name
          Value: !Join [ -, [ !Ref Stack, rds, stage ] ]
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Mode
          Value: stage
  RDSMySQLInstanceProd: 
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Retain
    DependsOn: DBEC2SecurityGroup
    Condition: CreateRDSInstanceResourcesProd
    Properties: 
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: MySQL
      DBName: !Ref DBName
      MultiAZ: !Ref MultiAZDatabaseProd
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBInstanceClassProd
      AllocatedStorage: !Ref DBAllocatedStorageProd
      PubliclyAccessible: !Ref AllowRemoteProd
      VPCSecurityGroups: 
        - !Ref DBEC2SecurityGroup
      Tags: 
        - Key: Name
          Value: !Join [ -, [ !Ref Stack, rds, prod ] ]
        - Key: Stack
          Value: !Ref Stack
        - Key: Owner
          Value: !Ref Owner
        - Key: Mode
          Value: prod
Outputs: 
  AccessKeyForS3UserAccessKey: 
    Value: !Ref S3UserAccessKey
  SecretKeyForS3UserAccessKey: 
    Value: !GetAtt S3UserAccessKey.SecretAccessKey
